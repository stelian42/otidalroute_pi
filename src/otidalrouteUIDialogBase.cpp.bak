///////////////////////////////////////////////////////////////////////////
// C++ code generated with wxFormBuilder (version Oct  8 2012)
// http://www.wxformbuilder.org/
//
// PLEASE DO "NOT" EDIT THIS FILE!
///////////////////////////////////////////////////////////////////////////

#include "otidalrouteUIDialogBase.h"
#include "otidalrouteUIDialog.h"

///////////////////////////////////////////////////////////////////////////

otidalrouteUIDialogBase::otidalrouteUIDialogBase(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style) : wxFrame(parent, id, title, pos, size, style)
{
	this->SetSizeHints( wxDefaultSize, wxDefaultSize );

	m_menubar3 = new wxMenuBar(0);
	m_mPosition = new wxMenu();
	wxMenuItem* m_mNewPosition;
	m_mNewPosition = new wxMenuItem(m_mPosition, wxID_ANY, wxString(_("&New Position")), wxEmptyString, wxITEM_NORMAL);
	m_mPosition->Append(m_mNewPosition);

	wxMenuItem* m_mUpdateBoat;
	m_mUpdateBoat = new wxMenuItem(m_mPosition, wxID_ANY, wxString(_("&Update Boat Position")) + wxT('\t') + wxT("Ctrl+U"), wxEmptyString, wxITEM_NORMAL);
	m_mPosition->Append(m_mUpdateBoat);

	wxMenuItem* m_mDeletePosition;
	m_mDeletePosition = new wxMenuItem(m_mPosition, wxID_ANY, wxString(_("&Delete")), wxEmptyString, wxITEM_NORMAL);
	m_mPosition->Append(m_mDeletePosition);

	wxMenuItem* m_mDeleteAllPositions;
	m_mDeleteAllPositions = new wxMenuItem(m_mPosition, wxID_ANY, wxString(_("Delete &All")), wxEmptyString, wxITEM_NORMAL);
	m_mPosition->Append(m_mDeleteAllPositions);

	m_menubar3->Append(m_mPosition, _("&Position"));

	m_mConfiguration = new wxMenu();
	wxMenuItem* m_mNew;
	m_mNew = new wxMenuItem(m_mConfiguration, wxID_ANY, wxString(_("&New")) + wxT('\t') + wxT("Ctrl+N"), wxEmptyString, wxITEM_NORMAL);
	m_mConfiguration->Append(m_mNew);

	m_mBatch = new wxMenuItem(m_mConfiguration, wxID_ANY, wxString(_("&Batch")) + wxT('\t') + wxT("Ctrl+B"), wxEmptyString, wxITEM_NORMAL);
	m_mConfiguration->Append(m_mBatch);

	m_mEdit = new wxMenuItem(m_mConfiguration, wxID_ANY, wxString(_("&Edit")) + wxT('\t') + wxT("Ctrl+E"), wxEmptyString, wxITEM_NORMAL);
	m_mConfiguration->Append(m_mEdit);

	m_mGoTo = new wxMenuItem(m_mConfiguration, wxID_ANY, wxString(_("&GoTo")) + wxT('\t') + wxT("Ctrl+G"), wxEmptyString, wxITEM_NORMAL);
	m_mConfiguration->Append(m_mGoTo);

	m_mDelete = new wxMenuItem(m_mConfiguration, wxID_ANY, wxString(_("&Delete")) + wxT('\t') + wxT("Ctrl+D"), wxEmptyString, wxITEM_NORMAL);
	m_mConfiguration->Append(m_mDelete);

	m_mDeleteAll = new wxMenuItem(m_mConfiguration, wxID_ANY, wxString(_("Delete All")), wxEmptyString, wxITEM_NORMAL);
	m_mConfiguration->Append(m_mDeleteAll);

	m_mConfiguration->AppendSeparator();

	m_mCompute = new wxMenuItem(m_mConfiguration, wxID_ANY, wxString(_("&Compute")) + wxT('\t') + wxT("Ctrl+C"), wxEmptyString, wxITEM_NORMAL);
	m_mConfiguration->Append(m_mCompute);

	m_mComputeAll = new wxMenuItem(m_mConfiguration, wxID_ANY, wxString(_("Compute &All")) + wxT('\t') + wxT("Ctrl+A"), wxEmptyString, wxITEM_NORMAL);
	m_mConfiguration->Append(m_mComputeAll);

	m_mStop = new wxMenuItem(m_mConfiguration, wxID_ANY, wxString(_("&Stop")) + wxT('\t') + wxT("Ctrl+Z"), wxEmptyString, wxITEM_NORMAL);
	m_mConfiguration->Append(m_mStop);

	wxMenuItem* m_mResetAll;
	m_mResetAll = new wxMenuItem(m_mConfiguration, wxID_ANY, wxString(_("&Reset All")) + wxT('\t') + wxT("Ctrl+R"), wxEmptyString, wxITEM_NORMAL);
	m_mConfiguration->Append(m_mResetAll);

	m_mConfiguration->AppendSeparator();

	m_mExport = new wxMenuItem(m_mConfiguration, wxID_ANY, wxString(_("E&xport")) + wxT('\t') + wxT("Ctrl+X"), wxEmptyString, wxITEM_NORMAL);
	m_mConfiguration->Append(m_mExport);

	m_mExportAll = new wxMenuItem(m_mConfiguration, wxID_ANY, wxString(_("Export All")), wxEmptyString, wxITEM_NORMAL);
	m_mConfiguration->Append(m_mExportAll);

	m_mConfiguration->AppendSeparator();

	wxMenuItem* m_mFilter;
	m_mFilter = new wxMenuItem(m_mConfiguration, wxID_ANY, wxString(_("&Filter")) + wxT('\t') + wxT("Ctrl+F"), wxEmptyString, wxITEM_NORMAL);
	m_mConfiguration->Append(m_mFilter);

	m_menubar3->Append(m_mConfiguration, _("&Configuration"));


	wxBoxSizer* bSizer1;
	bSizer1 = new wxBoxSizer( wxVERTICAL );

	wxStaticBoxSizer* sbSizer2;
	sbSizer2 = new wxStaticBoxSizer( new wxStaticBox( this, wxID_ANY|wxEXPAND, _("Date/Time") ), wxHORIZONTAL );

	m_textCtrl1 = new wxTextCtrl( this, wxID_ANY, wxEmptyString, wxDefaultPosition,  wxSize( 170,20 ), wxTE_READONLY|wxSIMPLE_BORDER );
	sbSizer2->Add( m_textCtrl1, 0, wxALL, 5 );
	bSizer1->Add(sbSizer2, 1, wxEXPAND, 5);
		
	wxStaticBoxSizer* sbSizer4;

	sbSizer4 = new wxStaticBoxSizer( new wxStaticBox( this, wxID_ANY, _("Boat Speed") ), wxVERTICAL );
	m_tSpeed = new wxTextCtrl(this, wxID_ANY, wxEmptyString, wxDefaultPosition, wxSize(70, 20),wxSIMPLE_BORDER);
	sbSizer4->Add(m_tSpeed, 0, wxALL, 5);

	bSizer1->Add( sbSizer4, 1, wxEXPAND, 5 );

	wxStaticBoxSizer* sbSizer3;
	sbSizer3 = new wxStaticBoxSizer( new wxStaticBox( this, wxID_ANY, _("Step (Minutes)") ), wxHORIZONTAL );
		
	wxArrayString m_choice1Choices;
	m_choice1Choices.Add(_T("60"));
	m_choice1Choices.Add(_T("30"));
	m_choice1Choices.Add(_T("15"));
	m_choice1 = new wxChoice( this, wxID_ANY, wxDefaultPosition, wxDefaultSize, m_choice1Choices, 0);	
	m_choice1->SetSelection( 0 );

	sbSizer3->Add( m_choice1, 0, wxALL, 5 );

	m_button2 = new wxButton(this, wxID_ANY, _("Calculate"), wxDefaultPosition, wxSize(60, -1), 0);
	sbSizer3->Add(m_button2, 0, wxALL, 5);

	m_button1 = new wxButton( this, wxID_ANY, _("Help"), wxDefaultPosition, wxDefaultSize, 0 );
	sbSizer3->Add( m_button1, 0, wxALL, 5 );	

	m_bpPrev = new wxBitmapButton( this, wxID_ANY, wxNullBitmap, wxDefaultPosition, wxSize( 30,-1 ), 0  );
	m_bpPrev->SetToolTip( _("Previous") );	
	sbSizer3->Add( m_bpPrev, 0, wxALL, 1 );

	m_bpNext = new wxBitmapButton( this, wxID_ANY, wxNullBitmap, wxDefaultPosition, wxSize( 30,-1 ), 0  );
	m_bpNext->SetToolTip( _("Next") );
	sbSizer3->Add( m_bpNext, 0, wxALL, 1 );

	bSizer1->Add( sbSizer3, 1, wxEXPAND, 5 );

	wxStaticBoxSizer* sbSizer30;
	sbSizer30 = new wxStaticBoxSizer(new wxStaticBox(this, wxID_ANY, _("Positions")), wxVERTICAL);

	wxFlexGridSizer* fgSizer93;
	fgSizer93 = new wxFlexGridSizer(0, 2, 0, 0);
	fgSizer93->AddGrowableCol(0);
	fgSizer93->AddGrowableRow(0);
	fgSizer93->SetFlexibleDirection(wxBOTH);
	fgSizer93->SetNonFlexibleGrowMode(wxFLEX_GROWMODE_SPECIFIED);

	m_lPositions = new wxListCtrl(this, wxID_ANY, wxDefaultPosition, wxSize(180, -1), wxLC_HRULES | wxLC_REPORT | wxLC_SINGLE_SEL | wxHSCROLL | wxVSCROLL);
	fgSizer93->Add(m_lPositions, 0, wxALL | wxEXPAND, 5);

	sbSizer30->Add(fgSizer93, 1, wxEXPAND, 5);

	bSizer1->Add(sbSizer30, 1, wxEXPAND, 5);
	this->SetMenuBar(m_menubar3);
	
	this->SetSizer( bSizer1 );
	this->Layout();
	bSizer1->Fit( this );
	
	this->Centre( wxBOTH );
	
	// Connect Events
	this->Connect( wxEVT_CLOSE_WINDOW, wxCloseEventHandler( otidalrouteUIDialogBase::OnClose ) );
	this->Connect( wxEVT_SIZE, wxSizeEventHandler( otidalrouteUIDialogBase::OnSize ) );
	/*
	m_mFile = new wxMenu();
	wxMenuItem* m_mOpen;
	m_mOpen = new wxMenuItem(m_mFile, wxID_ANY, wxString(_("&Open")) + wxT('\t') + wxT("Ctrl+O"), wxEmptyString, wxITEM_NORMAL);
	m_mFile->Append(m_mOpen);

	wxMenuItem* m_mSave;
	m_mSave = new wxMenuItem(m_mFile, wxID_ANY, wxString(_("&Save")) + wxT('\t') + wxT("Ctrl+S"), wxEmptyString, wxITEM_NORMAL);
	m_mFile->Append(m_mSave);

	m_mFile->AppendSeparator();

	wxMenuItem* m_mClose;
	m_mClose = new wxMenuItem(m_mFile, wxID_ANY, wxString(_("&Close")) + wxT('\t') + wxT("Ctrl+W"), wxEmptyString, wxITEM_NORMAL);
	m_mFile->Append(m_mClose);
*/
	this->Connect(wxEVT_RIGHT_DOWN, wxMouseEventHandler(otidalrouteUIDialogBase::otidalrouteOnContextMenu), NULL, this);
	this->Connect(m_mNew->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(otidalrouteUIDialogBase::OnNew));

 	m_button1->Connect( wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler( otidalrouteUIDialogBase::About ), NULL, this );
	m_button2->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(otidalrouteUIDialogBase::CalculateCTS), NULL, this);

	this->Connect(m_mNewPosition->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(otidalrouteUIDialogBase::OnNewPosition));
	this->Connect(m_mDeletePosition->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(otidalrouteUIDialogBase::OnDeletePosition));
	this->Connect(m_mDeleteAllPositions->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(otidalrouteUIDialogBase::OnDeleteAllPositions));
}

otidalrouteUIDialogBase::~otidalrouteUIDialogBase()
{
	// Disconnect Events
	this->Disconnect( wxEVT_CLOSE_WINDOW, wxCloseEventHandler( otidalrouteUIDialogBase::OnClose ) );
	this->Disconnect( wxEVT_SIZE, wxSizeEventHandler( otidalrouteUIDialogBase::OnSize ) );

	this->Disconnect(wxEVT_RIGHT_DOWN, wxMouseEventHandler(otidalrouteUIDialogBase::otidalrouteOnContextMenu), NULL, this);

    m_button1->Disconnect( wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler( otidalrouteUIDialogBase::About ), NULL, this );
	m_button2->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(otidalrouteUIDialogBase::CalculateCTS), NULL, this);

}

otidalroutePreferencesDialogBase::otidalroutePreferencesDialogBase( wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style ) : wxDialog( parent, id, title, pos, size, style )
{
	this->SetSizeHints( wxDefaultSize, wxDefaultSize );
	
	wxFlexGridSizer* fgSizer8;
	fgSizer8 = new wxFlexGridSizer( 0, 1, 0, 0 );
	fgSizer8->SetFlexibleDirection( wxBOTH );
	fgSizer8->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_ALL );
	
	 
	wxFlexGridSizer* fgSizer6;
	fgSizer6 = new wxFlexGridSizer( 0, 1, 0, 0 );
	fgSizer6->SetFlexibleDirection( wxBOTH );
	fgSizer6->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_ALL );
	
	m_cbUseRate = new wxCheckBox( this, wxID_ANY, _("Display tidal rates (knots)"), wxDefaultPosition, wxDefaultSize, 0 );
	fgSizer6->Add( m_cbUseRate, 0, wxALL, 5 );
	
	m_cbUseDirection = new wxCheckBox( this, wxID_ANY, _("Display tidal direction"), wxDefaultPosition, wxDefaultSize, 0 );
	fgSizer6->Add( m_cbUseDirection, 0, wxALL, 5 );
	
	m_cbFillColour = new wxCheckBox( this, wxID_ANY, _("Fill Colour"), wxDefaultPosition, wxDefaultSize, 0 );
	fgSizer6->Add( m_cbFillColour, 0, wxALL, 5 );

	fgSizer8->Add( fgSizer6, 1, wxEXPAND, 5 );
		
	wxBoxSizer* bSizer2;
	bSizer2 = new wxBoxSizer( wxHORIZONTAL );
	
	wxStaticBoxSizer* sbSizer1;
	sbSizer1 = new wxStaticBoxSizer( new wxStaticBox( this, wxID_ANY, _("Tidal Current Arrow Colour") ), wxVERTICAL );
	
	myColourPicker0 = new wxColourPickerCtrl(this, wxID_ANY, *wxRED,
    wxDefaultPosition, wxDefaultSize, 0);
	
	myColourPicker1 = new wxColourPickerCtrl(this, wxID_ANY, *wxRED,
    wxDefaultPosition, wxDefaultSize, 0);

	myColourPicker2 = new wxColourPickerCtrl(this, wxID_ANY, *wxRED,
    wxDefaultPosition, wxDefaultSize, 0);

	myColourPicker3 = new wxColourPickerCtrl(this, wxID_ANY, *wxRED,
    wxDefaultPosition, wxDefaultSize, 0);

	myColourPicker4 = new wxColourPickerCtrl(this, wxID_ANY, *wxRED,
    wxDefaultPosition, wxDefaultSize, 0);
	
	wxGridSizer* gSizer1;
	gSizer1 = new wxGridSizer( 0, 2, 0, 0 );
	
	m_staticText4 = new wxStaticText( this, wxID_ANY, _("      < 0.5 knots"), wxDefaultPosition, wxDefaultSize, 0 );
	m_staticText4->Wrap( -1 );
	gSizer1->Add( m_staticText4, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );
	gSizer1->Add( myColourPicker0, 0, wxALL, 5 );	
	
	m_staticText41 = new wxStaticText( this, wxID_ANY, _(">= 0.5 and < 1.5"), wxDefaultPosition, wxDefaultSize, 0 );
	m_staticText41->Wrap( -1 );
	gSizer1->Add( m_staticText41, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );
	gSizer1->Add( myColourPicker1, 0, wxALL, 5 );
	
	m_staticText42 = new wxStaticText( this, wxID_ANY, _(">= 1.5 and < 2.5"), wxDefaultPosition, wxDefaultSize, 0 );
	m_staticText42->Wrap( -1 );
	gSizer1->Add( m_staticText42, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );
	gSizer1->Add( myColourPicker2, 0, wxALL, 5 );
	
	m_staticText43 = new wxStaticText( this, wxID_ANY, _(">= 2.5 and < 3.5"), wxDefaultPosition, wxDefaultSize, 0 );
	m_staticText43->Wrap( -1 );
    gSizer1->Add( m_staticText43, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );
    gSizer1->Add( myColourPicker3, 0, wxALL, 5 );
	
	m_staticText44 = new wxStaticText( this, wxID_ANY, _(">= 3.5 knots    "), wxDefaultPosition, wxDefaultSize, 0 );
	m_staticText44->Wrap( -1 );
	gSizer1->Add( m_staticText44, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );
	gSizer1->Add( myColourPicker4, 0, wxALL, 5 );
	
    sbSizer1->Add( gSizer1, 1, wxEXPAND, 5 );
	bSizer2->Add( sbSizer1, 1, wxEXPAND, 5 );

	fgSizer8->Add(bSizer2, 1, wxALL|wxEXPAND, 5 );

	wxStdDialogButtonSizer* m_sdbSizer2;
	
	wxButton* m_sdbSizer2OK;
	wxButton* m_sdbSizer2Cancel;
	m_sdbSizer2 = new wxStdDialogButtonSizer();
	m_sdbSizer2OK = new wxButton( this, wxID_OK );
	m_sdbSizer2->AddButton( m_sdbSizer2OK );
	m_sdbSizer2Cancel = new wxButton( this, wxID_CANCEL );
	m_sdbSizer2->AddButton( m_sdbSizer2Cancel );
	m_sdbSizer2->Realize();
	
	fgSizer8->Add( m_sdbSizer2, 1, wxALL|wxEXPAND, 5 );
	
	this->SetSizer( fgSizer8 );
	this->Layout();
	fgSizer8->Fit( this );
	
	this->Centre( wxBOTH );

}

otidalroutePreferencesDialogBase::~otidalroutePreferencesDialogBase()
{
	
}